
//
// Copyright (c) Michael Eddington
//
// Permission is hereby granted, free of charge, to any person obtaining a copy 
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights 
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
// copies of the Software, and to permit persons to whom the Software is 
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in	
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

// Authors:
//   Michael Eddington (mike@dejavusecurity.com)

// $Id$

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using NUnit.Framework.Constraints;
using Peach.Core;
using Peach.Core.Dom;
using Peach.Core.Analyzers;
using Peach.Core.IO;
using Peach.Core.Debuggers.WindowsSystem;
using Peach.Core.Agent.Monitors.WindowsDebug;
using System.Threading;
using System.ServiceProcess;
using NLog;

namespace Peach.Core.Test.Debuggers
{
	[TestFixture]
	class WinSystemTests
	{
		static NLog.Logger logger = LogManager.GetCurrentClassLogger();

		SystemDebugger dbg = null;
		string caughtException;
		bool firstChance;
		string program = "CrashingProgram.exe";

		[SetUp]
		public void SetUp()
		{
			if (!File.Exists(program))
			{
				var paths = Environment.GetEnvironmentVariable("PATH").Split(Path.PathSeparator);
				foreach (var path in paths)
				{
					var candidate = Path.Combine(path, program);
					if (File.Exists(candidate))
					{
						program = candidate;
						break;
					}
				}
			}

			firstChance = true;
			caughtException = null;
		}

		[Test]
		public void NonCrashTest()
		{
			System.Environment.SetEnvironmentVariable("PEACH", "AAAA");
			dbg = SystemDebugger.CreateProcess(program);
			dbg.HandleAccessViolation = HandleAccessViolation;
			dbg.MainLoop();

			Assert.IsNull(caughtException);
		}

		[Test]
		public void CrashTestFirstChance()
		{
			CrashTest(true, "");
			Assert.AreEqual("FirstChance", caughtException);
		}

		[Test]
		public void CrashTestSecondChance()
		{
			CrashTest(false, "");
			Assert.AreEqual("SecondChance", caughtException);
		}

		[Test]
		public void CrashChild()
		{
			CrashTest(true, " arg1 arg2");
			Assert.AreEqual("FirstChance", caughtException);
		}

		void CrashTest(bool firstChance, string arg)
		{
			this.firstChance = firstChance;

			System.Environment.SetEnvironmentVariable
			dbg = SystemDebugger.CreateProcess(program + arg);
			dbg.HandleAccessViolation = HandleAccessViolation;
			dbg.MainLoop();
		}

		public bool HandleAccessViolation(UnsafeMethods.DEBUG_EVENT e)
		{
			do
			{
				if (e.u.Exception.dwFirstChance != 0)
				{
					// If ignoring first chance, return true
					if (!firstChance)
						return true;

					// Guard page or illegal op
					if (e.u.Exception.ExceptionRecord.ExceptionCode == 0x80000001 ||
						e.u.Exception.ExceptionRecord.ExceptionCode == 0xC000001D)
					{
						// Internesting!
						logger.Debug("HandleAccessViolation: First chance guard page or illegal op");
						break;
					}

					if (e.u.Exception.ExceptionRecord.ExceptionCode == 0xC0000005)
					{
						if (e.u.Exception.ExceptionRecord.ExceptionInformation[0].ToInt64() == 1 &&
							e.u.Exception.ExceptionRecord.ExceptionInformation[1].ToInt64() != 0)
						{
							// is write a/v?
							logger.Debug("HandleAccessViolation: First chance write a/v");
							break;
						}

						if (e.u.Exception.ExceptionRecord.ExceptionInformation[0].ToInt64() == 0)
						{
							// is DEP?
							logger.Debug("HandleAccessViolation: First chance DEP");
							break;
						}
					}

					// Otherwise not interesting
					return true;
				}

				// Second chance we capture all
				logger.Debug("HandleAccessViolation: Second chance exception, w00t");
			} while (false);

			caughtException = e.u.Exception.dwFirstChance == 0 ? "SecondChance" : "FirstChance";

			return false;
		}

		[Test]
		public void ServiceTest()
		{
			if (!Peach.Core.OS.Windows.Privilege.IsUserAdministrator())
				Assert.Ignore("User is not an administrator.");

			try
			{
				using (var si = SingleInstance.CreateInstance("Peach.Core.Test.OS.Windows.WinSystemTests"))
				{
					si.Lock();

					var dbg = new SystemDebuggerInstance() { service = "iphlpsvc" };
					dbg.StartDebugger();

					for (int i = 0; i < 10; ++i)
					{
						Assert.True(dbg.IsRunning);
						System.Threading.Thread.Sleep(100);
					}

					dbg.StopDebugger();

					Assert.Null(dbg.crashInfo);
				}
			}
			finally
			{
				using (ServiceController srv = new ServiceController("iphlpsvc"))
				{
					if (srv.Status == ServiceControllerStatus.Stopped)
					{
						srv.Start();
					}
				}
			}
		}

		[Test]
		public void BadProcess()
		{
			var dbg = new SystemDebuggerInstance() { commandLine = "foo.exe" };

			try
			{
				dbg.StartDebugger();
				Assert.Fail("Should throw");
			}
			catch (PeachException ex)
			{
				Assert.True(ex.Message.StartsWith("System debugger could not start process 'foo.exe'."));
			}
		}
	}
}
